# Use the official .NET 9 runtime as base image
FROM mcr.microsoft.com/dotnet/aspnet:9.0 AS base
WORKDIR /app
EXPOSE 8080
EXPOSE 8081

# Use the .NET 9 SDK for building
FROM mcr.microsoft.com/dotnet/sdk:9.0 AS build
WORKDIR /src

# Copy the entire OASIS project structure
COPY . .

# Build the STAR WebAPI project
WORKDIR "/src/STAR ODK/NextGenSoftware.OASIS.STAR.WebAPI"

# Create a minimal working Program.cs without external dependencies
RUN cat > Program.Simple.cs << 'EOF'
using Microsoft.OpenApi.Models;
using System.Reflection;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(c =>
{
    c.SwaggerDoc("v1", new OpenApiInfo
    {
        Contact = new OpenApiContact()
        {
            Email = "ourworld@nextgensoftware.co.uk",
            Name = "STAR API"
        },
        Description = "The STAR API that powers the STAR ODK (Software Development Kit) for building advanced applications on top of the OASIS API.",
        Title = "WEB 5 STAR API v1.0.0",
        Version = "v1",
    });
});

// Add CORS
builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowAll", policy =>
    {
        policy.AllowAnyOrigin()
              .AllowAnyMethod()
              .AllowAnyHeader();
    });
});

var app = builder.Build();

// Configure the HTTP request pipeline.
app.UseSwagger();
app.UseSwaggerUI(c =>
{
    c.SwaggerEndpoint("/swagger/v1/swagger.json", "WEB 5 STAR API v1.0.0");
});

app.UseHttpsRedirection();
app.UseCors("AllowAll");
app.UseAuthorization();
app.MapControllers();

app.Run();
EOF

# Create a simplified project file
RUN cat > NextGenSoftware.OASIS.STAR.WebAPI.Simple.csproj << 'EOF'
<Project Sdk="Microsoft.NET.Sdk.Web">
  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <NoWarn>$(NoWarn);1591</NoWarn>
  </PropertyGroup>
  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.OpenApi" Version="9.0.1" />
    <PackageReference Include="Swashbuckle.AspNetCore" Version="6.5.0" />
  </ItemGroup>
</Project>
EOF

# Copy only the essential source files
RUN mkdir -p Controllers Models Properties
RUN cp Controllers/*.cs Controllers/ 2>/dev/null || true
RUN cp Models/*.cs Models/ 2>/dev/null || true
RUN cp Properties/*.cs Properties/ 2>/dev/null || true
RUN cp appsettings*.json . 2>/dev/null || true

# Create a simple health controller
RUN cat > Controllers/HealthController.cs << 'EOF'
using Microsoft.AspNetCore.Mvc;

namespace NextGenSoftware.OASIS.STAR.WebAPI.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class HealthController : ControllerBase
    {
        [HttpGet]
        public IActionResult Get()
        {
            return Ok(new { status = "healthy", timestamp = DateTime.UtcNow });
        }
    }
}
EOF

# Restore and build the simplified project
RUN dotnet restore "NextGenSoftware.OASIS.STAR.WebAPI.Simple.csproj"
RUN dotnet build "NextGenSoftware.OASIS.STAR.WebAPI.Simple.csproj" -c Release -o /app/build

# Publish the application
FROM build AS publish
WORKDIR "/src/STAR ODK/NextGenSoftware.OASIS.STAR.WebAPI"
RUN dotnet publish "NextGenSoftware.OASIS.STAR.WebAPI.Simple.csproj" -c Release -o /app/publish /p:UseAppHost=false

# Final stage
FROM base AS final
WORKDIR /app
COPY --from=publish /app/publish .

# Set environment variables
ENV ASPNETCORE_ENVIRONMENT=Production
ENV ASPNETCORE_URLS=http://+:8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:8080/api/health || exit 1

ENTRYPOINT ["dotnet", "NextGenSoftware.OASIS.STAR.WebAPI.Simple.dll"]